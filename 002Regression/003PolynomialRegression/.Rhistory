install.packages(c("xlsx","rminer","MASS","leaps",
"class","e1071","rpart","rpart.plot",
"neuralnet","nnet","devtools","caret",
"arules","arulesviz","cluster","xts","matrixcal",
"forecast","igraph","treemap","rworldmap","ggmap"),dependencies = T)
library(xlsx)
library(xlsx)
install.packages("readxl")
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
library(xlsx)
#sedancar.xlsx
df=read.xlsx(file.choose(),1,header = T)
head(df)
summary(df)
plot(df$Annual_Income,df$Household_Area, las=1,
xlab = "Annual Income('a.'lakhs)",ylab = "Household Area(00s ft2)",
xlim = c(2,12),ylim = c(13,25),pch=c(21,19)[as.numeric(df$Ownership)])
legend("bottomright",inset=0.005,c("owner","nonowner"),
pch=c(19,21),cex = 0.7,x.intersp = 0.5,y.intersp = 0.5)
#Method 1: set of horizontal and vertical lines
df[df$Annual_Income>5 & df$Household_Area<8.5 & df$Household_Area>18
& df$Household_Area<20, c(1,2)]
abline(h=18.8,col=3)
segments(7,0,7,18.8,col=3)
segments(5.8,18.8,5.8,26,col=3)
df[df$Annual_Income>6 & df$Annual_Income<8.5 & df$Household_Area>18 & df$Household_Area<21, c(1,2)]
segments(5.8,19.5,13,19.5,col=3)
df[df$Household_Area>17 & df$Household_Area<19 & df$Annual_Income,c(1,2)]
segments(0,18.2,7,18.2,col = 3)
######
plot(df$Annual_Income,df$Household_Area,las=1,
xlab = "Annual Income($lakh)", ylab = "Household Area(00s Ft^2)",
xlim = c(2,12),ylim = c(13,25), pch=c(21,19)[as.numeric(df$Ownership)])
legend("bottomright",inset = 0.005,c("Owner","Nonowner"),pch=c(19,21),cex=0.7,x.intersp=0.5,y.intersp = 0.5)
df[df$Annual_Income>5 & df$Annual_Income<6 & df$Household_Area>20 & df$Household_Area<23, c(1,2)]
df[df$Annual_Income>8 & df$Annual_Income<9 & df$Household_Area>16 & df$Household_Area<18, c(1,2)]
segments(5.4,22,8.4,16,col = 3)
slop=atan2(22-16,5.4-8.4)
segments(5.4+10^cos(slop),22+10^sin(slop),5.4,22,col = 3)
segments(8.4,16,8.4-20^cos(slop),16-20^sin(slop),col = 3)
setwd("D:/MACHINE LEARNING/Machine Learning A-Z/Part 2 - Regression/Section 6 - Polynomial Regression")
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
predict(lin_reg, data.frame(Level = 6.5))
predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
